format_version: 3
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - RELEASE_VERSION: 1.5.2

  # define these in your .bitrise.secrets.yml
  - SAMPLE_APP_URL: https://github.com/bitrise-samples/macos-sample-app.git
  - BITRISE_PROJECT_PATH: macos-sample-app.xcodeproj
  - BITRISE_SCHEME: macos-sample-app

workflows:
  # ----------------------------------------------------------------
  # --- workflow to Step Test
  test:
    before_run:
    - go-tests
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            rm -rf ./_tmp
    - change-workdir:
        title: Switch working dir to test/_tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file', which would work for local tests
          but not if the step is included in another bitrise.yml!
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - git-clone:
        run_if: true
        inputs:
        - repository_url: $SAMPLE_APP_URL
        - clone_into_dir: ./
        - commit: ""
        - tag: ""
        - branch: "master"
        - pull_request_id: ""
        - clone_depth: ""
    - certificate-and-profile-installer:
        inputs:
        - default_certificate_url: ""
        - default_certificate_passphrase: ""
        - default_provisioning_profile_url: ""
    - path::./:
        title: "Step Test: App Store"
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - is_clean_build: "yes"
        - output_tool: xcodebuild
        - is_export_all_dsyms: "yes"
        - is_export_xcarchive_zip: "yes"
        - export_method: app-store
        - verbose_log: "yes"
    - path::./:
        title: "Step Test: Developer ID"
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - is_clean_build: "yes"
        - output_tool: xcodebuild
        - is_export_all_dsyms: "yes"
        - is_export_xcarchive_zip: "yes"
        - export_method: developer-id
        - verbose_log: "yes"
    - path::./:
        title: "Step Test: None"
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - is_clean_build: "yes"
        - output_tool: xcodebuild
        - is_export_all_dsyms: "yes"
        - is_export_xcarchive_zip: "yes"
        - export_method: none
        - verbose_log: "yes"
    - script:
        title: Output (generated by the Step) tests
        inputs:
        - content: |-
            echo "-> BITRISE_EXPORTED_FILE_PATH: ${BITRISE_EXPORTED_FILE_PATH}"
            echo "-> BITRISE_DSYM_PATH: ${BITRISE_DSYM_PATH}"
            echo "-> BITRISE_APP_PATH: ${BITRISE_APP_PATH}"
            echo "-> BITRISE_XCARCHIVE_PATH: ${BITRISE_XCARCHIVE_PATH}"
            echo "-> BITRISE_MACOS_XCARCHIVE_PATH: ${BITRISE_MACOS_XCARCHIVE_PATH}"

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test ./...

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  # ----------------------------------------------------------------
  # --- workflow to create Release version
  create-release:
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u github.com/bitrise-tools/releaseman
            export CI=true
            releaseman create --version "$RELEASE_VERSION"

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: xcode-archive-mac
      - STEP_GIT_VERION_TAG_TO_SHARE: $RELEASE_VERSION
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-xcode-archive-mac.git
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}
            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}
            bitrise share finish
