title: Xcode Archive for Mac
summary: |-
  Create an archive for your OS X project so you can share it, upload it, deploy it and catch them
  all! Well, maybe not the last one.
description: ""
website: https://github.com/bitrise-steplib/steps-xcode-archive-mac
source_code_url: https://github.com/bitrise-steplib/steps-xcode-archive-mac
support_url: https://github.com/bitrise-steplib/steps-xcode-archive-mac/issues
host_os_tags:
  - "osx-10.10"
project_type_tags:
  - macos
type_tags:
  - build
  - xcode
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  check_only:
  - name: xcode
  brew:
  - name: go
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-archive-mac
run_if: ""
inputs:
  - workdir: $BITRISE_SOURCE_DIR
    opts:
      title: "Working directory"
      summary: ""
      description: |
        Working directory of the step.
        You can leave it empty to don't change it.
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: "Project (or Workspace) path"
      summary: ""
      description: |
        A `.xcodeproj` or `.xcworkspace` path.
      is_required: true
  - scheme: $BITRISE_SCHEME
    opts:
      title: "Scheme name"
      summary: ""
      description: |
        The Scheme to use.
      is_required: true
  - configuration:
    opts:
      title: "Configuration name"
      summary: ""
      description: |
        (optional) The configuration to use. By default your Scheme
        defines which configuration (Debug, Release, ...) should be used,
        but you can overwrite it with this option.
        **Make sure that the Configuration you specify actually exists
        in your Xcode Project**. If it does not, if you have a typo
        in the value of this input Xcode will simply use the Configuration
        specified by the Scheme and will silently ignore this parameter!
  - output_dir: $BITRISE_DEPLOY_DIR
    opts:
      title: "Output directory path"
      summary: ""
      description: |
        This directory will contain the generated .app or .pkg file's and .dSYM.zip files.
  - is_force_code_sign: "no"
    opts:
      title: "Use force code signing attributes?"
      description: |-
        __DEPRECATED!__ 

        Use `force_code_sign_identity` and `force_provisioning_profile` instead.
        
        If set to "yes" then it'll use the `PROVISIONING_PROFILE` (set
        to the value of the `$BITRISE_PROVISIONING_PROFILE_ID` environment)
        and `CODE_SIGN_IDENTITY` (set to the value
        of the `$BITRISE_CODE_SIGN_IDENTITY` environment)
        Xcode Command Line parameters,
        for force the use of specified Certificate and Provisioning Profile,
        to the ones
      value_options:
        - "yes"
        - "no"
      is_required: true
  - force_code_sign_identity:
    opts:
      title: "Force code signing with Identity"
      description: |-
        Force xcodebuild to use specified Code Sign Identity.

        Specify code sign identity as full ID (e.g. `Mac Developer: Bitrise Bot (VV2J4SV8V4)`)
        or specify code sign group ( `Mac Developer` or `Mac Distribution` ).

        You also have to **specify the Identity in the format it's stored in Xcode project settings**,
        and **not how it's presented in the Xcode.app GUI**!
        **Capitalization also matters**, `Mac Distribution` works but `mac distribution` does not!
  - force_provisioning_profile:
    opts:
      title: "Force code signing with Provisioning Profile"
      description: |-
        Force xcodebuild to use specified Provisioning Profile.

        Use Provisioning Profile's UUID, profile's name is not acceptable by xcodebuild.

        How to get your UUID:

        - In xcode select your project -> Build Settings -> Code Signing
        - Select the desired Provisioning Profile, then scroll down in profile list and click on Other...
        - The popup will show your profile's UUID.

        Format example:

        - c5be4123-1234-4f9d-9843-0d9be985a068
  - export_options_path:
    opts:
      title: "Export options path"
      description: |-
        Specifies a path to a plist file that configures archive exporting.
        If not specified, it will generate an export options plist with the method specified in `export_method`.
        Call xcodebuild -help for available export options.
  - export_method: "development"
    opts:
      title: "Export method"
      description: |-
        The method for exporting used in `exportOptions` plist.
        `none` means no resigning during export.
        Upload and install proper certificates when exporting with different identity than the one used for archive.
        See `xcodebuild -help` for more information.
      value_options:
        - "app-store"
        - "development"
        - "developer-id"
        - "none"
      is_required: true
  - is_clean_build: "yes"
    opts:
      title: "Do a clean Xcode build before the archive?"
      value_options:
        - "yes"
        - "no"
      is_required: true
  - output_tool: xcpretty
    opts:
      title: Output tool
      description: |-
        If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
        If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
      value_options:
      - xcpretty
      - xcodebuild
      is_required: true
  - is_export_xcarchive_zip: "no"
    opts:
      title: Export the generated archive?
      description: |
        If this input is set to `yes`, the generated .xcarchive will be zipped and moved to `output_dir`.
      value_options:
      - "yes"
      - "no"
      is_required: true
  - is_export_all_dsyms: "no"
    opts:
      title: Export all dsyms?
      description: |-
        If this input is set to `yes` step will collect every dsym (.app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
        Otherwise only .app dsym will be zipped and the zip path exported.
      value_options:
      - "yes"
      - "no"
      is_required: true
outputs:
  - BITRISE_EXPORTED_FILE_PATH:
    opts:
      title: The created .app or .pkg file's path
  - BITRISE_DSYM_PATH:
    opts:
      title: The created .dSYM.zip file's path
  - BITRISE_XCARCHIVE_PATH:
    opts:
      title: The created .xcarchive.zip file's path
